---
import Logo from './Logo.astro'
import { Links } from './NavigationLinks'
import { Icon } from 'astro-icon/components'
import Footer from './footer.astro'

const isCurrentPage = (url: string) => {
	const pathname = Astro.url.pathname
	const pathParts = pathname.split('/').filter(Boolean)
	const cleanUrl = url.replace('/', '')
	return pathParts.some((p) => cleanUrl.includes(p)) || pathname === url
}
---

<aside class="sticky top-0 hidden h-screen w-full flex-col border-x border-highlight md:flex">
	<nav>
		<section class="hidden py-4 md:block">
			<Logo />
		</section>

		<!-- Desktop Navigation -->
		<section class="flex flex-col justify-between gap-4 font-heading">
			<ul class="flex flex-grow flex-col gap-2 text-sm font-semibold tracking-wide">
				{
					Links.map((link) => (
						<li>
							<a
								href={link.url}
								class="group transition-transform duration-150"
								aria-current={isCurrentPage(link.url) ? 'page' : 'false'}
							>
								<div class="flex items-center gap-2 py-2 pl-4">
									<Icon name={link.icon} class="text-lg" />
									<span>{link.name}</span>
									<Icon
										name="svg-spinners:dot-revolve"
										class="loading ml-auto mr-4 hidden h-4 w-4 text-body group-data-[loading=true]:inline-block"
									/>
								</div>
							</a>
						</li>
					))
				}
			</ul>
		</section>
	</nav>
	<Footer />
</aside>
<style>
	a {
		z-index: 50;
	}
	a[aria-current='page'] {
		position: relative;
		font-weight: bold;
		z-index: 50;
	}

	a[aria-current='page']::before {
		content: '';
		position: absolute;
		inset: 0;
		@apply border-r-4 border-highlight-hover;
		z-index: -1;
		view-transition-name: current-page;
	}

	:global(::view-transition-group(current-page)) {
		animation-timing-function: var(--ease);
	}

	a[aria-current='page'] svg {
		@apply animate-bounce text-icon-hover;
		view-transition-name: current-page-icon;
	}

	section a:not([aria-current='page']):hover svg {
		@apply text-icon-hover;
	}

	section a:not([aria-current='page']):active {
		transform: scale(1.03);
	}
</style>

<script data-astro-rerun>
	document.addEventListener('astro:before-preparation', (ev) => {
		const originalLoader = ev.loader
		const navElement = document.querySelector('nav')
		const allLinkElements = [...navElement.querySelectorAll('a[aria-current]')]
		const linkArray = [...allLinkElements]

		if (!ev.sourceElement) return
		if (!ev.sourceElement.hasAttribute('aria-current') || ev.to.href === ev.from.href) return

		ev.loader = async function () {
			const toUrlLink = ev.to.href
			const toLinkElement = linkArray.find((element) => element.href === toUrlLink)

			if (toLinkElement && toLinkElement.hasAttribute('aria-current')) {
				toLinkElement.dataset.loading = 'true'
			}
			await originalLoader()
			if (toLinkElement && toLinkElement.hasAttribute('aria-current')) {
				toLinkElement.removeAttribute('loading')
			}
		}
	})
</script>
