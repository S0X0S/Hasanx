---
import { MobileLinks, Links } from './NavigationLinks'
import Footer from './footer.astro'
import { Icon } from 'astro-icon/components'
import SettingsRevamp from '$components/settings/settings-revamp.svelte'
import Logo from './Logo.astro'

const isCurrentPage = (url: string) => {
	const pathname = Astro.url.pathname
	const pathParts = pathname.split('/').filter(Boolean)
	const cleanUrl = url.replace('/', '')
	return pathParts.some((p) => cleanUrl.includes(p)) || pathname === url
}
---

<!-- Mobile Navigation Bar -->
<nav
	class="fixed bottom-0 left-0 right-0 z-[60] flex h-20 gap-4 border-t border-highlight bg-body md:hidden"
>
	<ul class="grid h-full w-full grid-cols-4 md:hidden">
		{
			MobileLinks.map((link) => (
				<li>
					<a
						href={link.url}
						class="group group flex h-full cursor-pointer flex-col items-center justify-center gap-2 aria-[current=page]:bg-button-active aria-[current=page]:font-bold"
						aria-current={isCurrentPage(link.url) ? 'page' : 'false'}
					>
						<Icon name={link.icon} class="text-2xl group-aria-[current=page]:text-icon-hover" />
						<span class="text-sm">{link.name}</span>
					</a>
				</li>
			))
		}

		<li class="flex">
			<button
				class="group flex h-full flex-grow flex-col items-center justify-center gap-2"
				id="mobile-button"
			>
				<Icon name="mdi:menu" class="text-2xl group-hover:text-heading-hover" />
				<span class="text-sm">Menu</span>
			</button>
		</li>
	</ul>

	<!-- Mobile Menu Content -->
	<div id="mobile-menu-content" class="fixed inset-0 z-40 hidden">
		<!-- Overlay that acts as close button too -->
		<button
			id="mobile-menu-overlay"
			class="fixed inset-0 z-50 h-full w-full bg-[black] bg-opacity-20 backdrop-blur-sm"
			tabindex="-1"></button>
		<!-- Content for Mobile -->

		<div
			class="fixed bottom-0 left-0 right-0 z-50 flex flex-col gap-4 rounded-t-md border-t border-highlight bg-body p-4"
		>
			<Logo />
			<SettingsRevamp client:idle />
			<section class="space-y-4">
				<!-- <span class="text-accent font-mono text-lg font-bold">Navigation</span> -->
				<ul class="grid grid-cols-3 grid-rows-2 gap-4">
					{
						Links.map((link) => (
							<li>
								<a
									id="open-link"
									href={link.url}
									class="group group flex flex-col items-center justify-center gap-2 rounded-md border-highlight-hover bg-button p-4 text-base  outline-2 outline-highlight transition-colors duration-150  hover:outline active:outline aria-[current=page]:border-2 aria-[current=page]:bg-button-active aria-[current=page]:font-bold"
									aria-current={isCurrentPage(link.url) ? 'page' : 'false'}
								>
									<Icon
										name={link.icon}
										class="text-xl group-aria-[current=page]:text-icon-hover"
									/>
									{link.name}
								</a>
							</li>
						))
					}
				</ul>
			</section>

			<Footer isMobile={true} />
		</div>
	</div>
</nav>

<style>
	#mobile-menu-overlay {
		-webkit-tap-highlight-color: transparent;
	}

	a[aria-current='page']:not(#open-link) {
		position: relative;
	}

	a[aria-current='page']:not(#open-link)::before {
		content: '';
		position: absolute;
		inset: 0;
		@apply border-t-2 border-highlight-hover;
		view-transition-name: indicator;
	}

	nav {
		view-transition-name: mobile-navigation;
	}

	:global(::view-transition-group(mobile-navigation)) {
		position: fixed;
		z-index: 100;
	}
	:global(::view-transition-group(indicator)) {
		position: fixed;
		z-index: 120;
	}
</style>

<script is:inline>
	document.addEventListener('astro:page-load', () => {
		let open = false

		const menuOverlay = document.querySelector('#mobile-menu-overlay')
		const mobileMenu = document.querySelector('#mobile-menu-content')
		const menuButton = document.querySelector('#mobile-button')

		function setMode() {
			if (open) {
				mobileMenu.classList.remove('hidden')
			} else {
				mobileMenu.classList.add('hidden')
			}
		}

		menuButton?.addEventListener('click', () => {
			open = true
			setMode()
		})
		menuOverlay?.addEventListener('click', () => {
			open = false
			setMode()
		})
	})

	document.addEventListener('astro:before-swap', (ev) => {
		let open = false

		const doc = ev.newDocument
		const menuOverlay = doc.querySelector('#mobile-menu-overlay')
		const mobileMenu = doc.querySelector('#mobile-menu-content')
		const menuButton = doc.querySelector('#mobile-button')

		function setMode() {
			if (open) {
				mobileMenu.classList.remove('hidden')
			} else {
				mobileMenu.classList.add('hidden')
			}
		}

		menuButton?.addEventListener('click', () => {
			open = true
			setMode()
		})
		menuOverlay?.addEventListener('click', () => {
			open = false
			setMode()
		})
	})
</script>
